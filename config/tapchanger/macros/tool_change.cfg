# Add this call to your slicer on every tool change
#
# slic3r-based example: 
#    TOOL_CHANGE PREV_TOOL=[previous_extruder] TOOL=[next_extruder] TOOL_TEMP={temperature[next_extruder]} TOOL_IDLE_TEMP={idle_temperature[current_extruder]} NOZZLE={nozzle_diameter[next_extruder]}

[gcode_macro TOOL_CHANGE]
description: TOOL_TEMP=n TOOL=n [TOOL_IDLE_TEMP=n]
  Change active tool. Drop off current tool, pick up new one and set it active. Waits for active temperature to be reached.
  If TOOL_IDLE_TEMP is specified, it is configured on the new active tool.
  PREV_TOOL= Previously active tool
  TOOL= New active tool
  TOOL_TEMP= Active temperature for the new tool
  TOOL_IDLE_TEMP= Idle temperature for the new tool
  NOZZLE= Diameter of the nozzle for the new active tool
gcode:
    # set previous tool standby now, so it can start cooling during dropoff
    {% if params.PREV_TOOL is defined and params.PREV_TOOL != "" %}
    M568 P{ params.PREV_TOOL } A1
    {% endif %}

    # set new temperature without waiting before tool change to save time
    M104 S{ params.TOOL_TEMP } T{ params.TOOL }

    # set nozzle diameter for new active tool
    {% if params.NOZZLE is defined and params.NOZZLE != "" %}
      T_CHANGE_NOZZLE TOOL={ params.TOOL } NOZZLE_DIAMETER={ params.NOZZLE }
    {% endif %}

    # perform tool change
    T{ params.TOOL }

    # set idle temp now, for when the tool next goes into standby
    {% if params.TOOL_IDLE_TEMP is defined and params.TOOL_IDLE_TEMP != "" %}
    M568 P{ params.TOOL } R{ params.TOOL_IDLE_TEMP }
    {% endif %}

    # wait for temperature to be reached
    M109 S{ params.TOOL_TEMP } T{ params.TOOL }
