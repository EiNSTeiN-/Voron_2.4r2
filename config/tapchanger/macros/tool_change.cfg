# Add this call to your slicer on every tool change
#
# slic3r-based example: 
#    TOOL_CHANGE PREV_TOOL=[previous_extruder] TOOL=[next_extruder] TOOL_TEMP={temperature[next_extruder]} TOOL_IDLE_TEMP={idle_temperature[next_extruder]} NOZZLE={nozzle_diameter[next_extruder]}

[gcode_macro _TOOL_CHANGE_PURGE_STATE]
variable_extruder_count: 5
variable_extruder_0_purged: 0
variable_extruder_1_purged: 0
variable_extruder_2_purged: 0
variable_extruder_3_purged: 0
variable_extruder_4_purged: 0
gcode:
  SET_GCODE_VARIABLE MACRO=_TOOL_CHANGE_PURGE_STATE VARIABLE=extruder_{ params.TOOL }_purged VALUE={ params.VALUE }

[gcode_macro _TOOL_CHANGE_RESET_PURGE_STATE]
gcode:
  {% set count = printer["gcode_macro _TOOL_CHANGE_PURGE_STATE"].extruder_count|int %}

  {% for tool in range(count) %}
    _TOOL_CHANGE_PURGE_STATE TOOL={ tool } VALUE=0
  {% endfor %}

[gcode_macro _DUMP_PURGE_STATE]
gcode:
  {% set count = printer["gcode_macro _TOOL_CHANGE_PURGE_STATE"].extruder_count|int %}
  RESPOND TYPE=command MSG='Number of extruders: { count }'
  
  {% for tool in range(count) %}
    {% set purged = printer["gcode_macro _TOOL_CHANGE_PURGE_STATE"]["extruder_"+ tool|string +"_purged"]|int %}
    RESPOND TYPE=command MSG='  Extruder { tool }: purged={ purged }'
  {% endfor %}

[gcode_macro TOOL_CHANGE]
description: TOOL_TEMP=n TOOL=n [TOOL_IDLE_TEMP=n]
  Change active tool. Drop off current tool, pick up new one and set it active. Waits for active temperature to be reached.
  If TOOL_IDLE_TEMP is specified, it is configured on the new active tool.
  PREV_TOOL= Previously active tool
  TOOL= New active tool
  TOOL_TEMP= Active temperature for the new tool
  TOOL_IDLE_TEMP= Idle temperature for the new tool
  NOZZLE= Diameter of the nozzle for the new active tool
gcode:
    {% set prev_tool = params.PREV_TOOL|default("-2")|int %}
    # set previous tool standby now, so it can start cooling during dropoff
    {% if prev_tool >= 0 %}
    M568 P{ params.PREV_TOOL } A1
    {% endif %}

    {% if prev_tool != -1 %}
    # set new temperature without waiting before tool change to save time
    M104 S{ params.TOOL_TEMP } T{ params.TOOL }

    # set nozzle diameter for new active tool
    {% if params.NOZZLE is defined and params.NOZZLE != "" %}
      T_CHANGE_NOZZLE TOOL={ params.TOOL } NOZZLE_DIAMETER={ params.NOZZLE }
    {% endif %}

    SAVE_GCODE_STATE NAME=tc_before_bucket

    # Move to purge bucket before saving so we come back here afterwards
    MOVE_TO_PURGE_BUCKET

    # The tool change does not move the toolhead back to its previous position 
    # until the next move command is issued, so we have to move it back after purging
    #SAVE_CURRENT_POSITION RESTORE_POSITION_TYPE=2
    SAVE_GCODE_STATE NAME=tc_before_tool_change

    # perform tool change
    T{ params.TOOL }

    # go back to purge bucket
    RESTORE_GCODE_STATE NAME=tc_before_tool_change MOVE=1 MOVE_SPEED=15000

    # set idle temp now, for when the tool next goes into standby
    {% if params.TOOL_IDLE_TEMP is defined and params.TOOL_IDLE_TEMP != "" %}
    M568 P{ params.TOOL } R{ params.TOOL_IDLE_TEMP }
    {% endif %}

    # wait for temperature to be reached
    M109 S{ params.TOOL_TEMP } T{ params.TOOL }

    # Purge and wipe, without moving back
    {% if printer["gcode_macro _TOOL_CHANGE_PURGE_STATE"]["extruder_" + params.TOOL + "_purged"]|int == 0 %}
      RESPOND TYPE=command MSG='Purging { params.TOOL } on first usage'
      PURGE_IN_BUCKET MOVE=0 E=25
      PURGE_IN_BUCKET MOVE=0 E=25
      PURGE_IN_BUCKET MOVE=0 E=25
      PURGE_IN_BUCKET MOVE=0 E=25
      _TOOL_CHANGE_PURGE_STATE TOOL={ params.TOOL } VALUE=1
    {% endif %}
    WIPE_NOZZLE MOVE=0

    RESTORE_GCODE_STATE NAME=tc_before_bucket MOVE=1 MOVE_SPEED=15000

    {% endif %} # prev_tool != -1
