# Use PRINT_START for the slicer starting script - please customise for your slicer of choice
# slic3r-based example:
#    PRINT_START TOOL=[current_extruder] BED_TEMP={first_layer_bed_temperature[current_extruder]} TOOL_TEMP=[first_layer_temperature] TOOL_IDLE_TEMP={idle_temperature[current_extruder]}

[gcode_macro _ABORT_NO_TOOL_DETECTED]
gcode:
    #RESPOND TYPE=error MSG='No tool detected and printer not homed! Insert tool manually before starting a print.'
    M84 ; Motors off
    PAUSE
    {action_raise_error("No tool detected and printer not homed! Insert tool manually before starting a print.")}

[gcode_macro _HOME_IF_TOOL_CHANGE_NEEDED]
gcode:
    {% if not 'xyz' in printer.toolhead.homed_axes %}
      # important to access 'active_tool_number' in a separate macro so it is evaluted with an up to date value
      {% set tool = printer.tool_probe_endstop.active_tool_number|int %}
      {% if tool < 0 %}
        _ABORT_NO_TOOL_DETECTED
      {% endif %}

      {% if (params.TOOL|int) != tool %}
        RESPOND TYPE=command MSG='Tool change necessary, waiting for temperature to be reached before homing.'

        M109 S150 T{ params.TOOL }
        M190 S{ params.BED_TEMP }

        RESPOND TYPE=command MSG='Temperature reached, homing before changing tool.'
        G28
      {% endif %}
    {% endif %}

    # right after homing gantry might be crooked if motors lost power, so we QGL before tool change
    {% if (params.TOOL|int) != tool and printer.quad_gantry_level.applied|lower == 'false' %}
      RESPOND TYPE=command MSG='Tool change is necessary, levelling gantry before changing tool.'
      QUAD_GANTRY_LEVEL
      G28 Z
    {% endif %}

[gcode_macro PRINT_START]
gcode:
    G21 ; set units to millimeters
    G90 ; use absolute coordinates
    M83 ; use relative distances for extrusion

    #SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 LED_ENABLE=1 FUZZ_ENABLE=1
    #SETUP_LINE_PURGE DISPLAY_PARAMETERS=1 ADAPTIVE_ENABLE=1 PURGE_AMOUNT=60
    BED_MESH_CLEAR
    _TOOL_CHANGE_RESET_PURGE_STATE
    KTCC_INIT_PRINT_STATS

    STATUS_HEATING

    # set temperatures without waiting
    RESPOND TYPE=command MSG='Setting temperatures'
    M104 S150 T{ params.TOOL }
    M140 S{ params.BED_TEMP }

    # set nozzle diameter for new active tool
    {% if params.NOZZLE is defined and params.NOZZLE != "" %}
      RESPOND TYPE=command MSG='Nozzle diameter provided for tool { params.TOOL }: { params.NOZZLE }mm'
      T_CHANGE_NOZZLE TOOL={ params.TOOL } NOZZLE_DIAMETER={ params.NOZZLE }
    {% endif %}

    # if a pickup is necessary, home current tool first unless already homed
    DETECT_TOOL
    _HOME_IF_TOOL_CHANGE_NEEDED TOOL={ params.TOOL } BED_TEMP={ params.BED_TEMP }

    # tool change
    T{ params.TOOL }

    # set idle temp if provided by slicer
    {% if params.TOOL_IDLE_TEMP is defined and params.TOOL_IDLE_TEMP != "" %}
    M568 P{ params.TOOL } R{ params.TOOL_IDLE_TEMP }
    {% endif %}

    # wait for tool probing temp and bed temp to be reached before homing and QGL
    RESPOND TYPE=command MSG='Waiting for probing temperatures to be reached...'
    M190 S{ params.BED_TEMP }
    M109 S150 T{ params.TOOL }

    G32                            ; home all axes
    G90                            ; absolute positioning

    # bed mesh
    RESPOND TYPE=command MSG='Generating mesh...'
    TOOL_BED_MESH_CALIBRATE

    # wait for hotend to reach its printing temperature
    RESPOND TYPE=command MSG='Waiting for printing temperatures to be reached...'
    M109 S{ params.TOOL_TEMP } T{ params.TOOL }

    RESPOND TYPE=command MSG='Enabling filament sensor for tool { params.TOOL }...'
    SET_FILAMENT_SENSOR SENSOR=filament_sensor_t{ params.TOOL } ENABLE=1

    SET_FAN_SPEED FAN=Nevermore SPEED=1 ; enable enclosure filter
    STATUS_PRINTING

    LINE_PURGE
    _TOOL_CHANGE_PURGE_STATE TOOL={ params.TOOL } VALUE=1 ; avoid purging this tool again
