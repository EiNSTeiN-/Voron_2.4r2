# Macros for sensorless homing with TapChanger

[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 X
    # Move away
    G91
    G1 X-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _SAVE_PROBE_RESULT]
variable_probe_z_result: 0.0
gcode:
  RESPOND type=command MSG='Probed Z: { printer.probe.last_z_result }'
  SET_GCODE_VARIABLE MACRO=_SAVE_PROBE_RESULT VARIABLE=probe_z_result VALUE={ printer.probe.last_z_result|float }

[gcode_macro _DISABLE_BED_OFFSETS]
gcode:
  SET_GCODE_VARIABLE MACRO=_SET_BED_OFFSETS VARIABLE=disabled VALUE=1

[gcode_macro _ENABLE_BED_OFFSETS]
gcode:
  SET_GCODE_VARIABLE MACRO=_SET_BED_OFFSETS VARIABLE=disabled VALUE=0  

[gcode_macro _SET_BED_OFFSETS]
variable_disabled: 0
gcode:
  {% set active_tool_no = printer.tool_probe_endstop.active_tool_number %}
  {% set disabled = printer['gcode_macro _SET_BED_OFFSETS'].disabled == 1 %}
  {% if not disabled %}
    {% if active_tool_no != -1 %}
      {% set probe_z_result = printer['gcode_macro _SAVE_PROBE_RESULT'].probe_z_result|float %}
      {% set tool_z_offset = printer["tool "+active_tool_no|string].offset[2]|float %}
      {% set position_endstop = printer.configfile.settings.stepper_z.position_endstop|default(0.0)|float %}
      {% set probe_z_offset = printer.tool_probe_endstop.active_tool_probe_z_offset|float %}
      {% set offset = (-probe_z_result + position_endstop + tool_z_offset + probe_z_offset) %}

      G0 Z10 F1000 ; set known position
      SET_KINEMATIC_POSITION Z={ 10.0 + offset }
      #_TOOL_HOMING_OFFSET Z=0.0 #{ tool_z_offset }

      RESPOND type=command MSG='Set probe_z_result={ probe_z_result } tool_z_offset={ tool_z_offset } probe_z_offset={ probe_z_offset } for tool={ active_tool_no }'
    {% else %}
      RESPOND type=error MSG='Not applying any home offsets because no tool was detected'
    {% endif %}
  {% else %}
    RESPOND type=error MSG='Not applying any home offsets because they are currently disabled'
  {% endif %}

[gcode_macro _APPLY_OFFSET_RELATIVE_TO_ENDSTOP]
gcode:
  {% set active_tool_no = printer.tool_probe_endstop.active_tool_number %}
  {% if active_tool_no != -1 %}
     {% set probe_z_result = printer['gcode_macro _SAVE_PROBE_RESULT'].probe_z_result|float %}
     {% set tool_z_offset = printer["tool "+active_tool_no|string].offset[2]|float %}
     {% set position_endstop = printer.configfile.settings.stepper_z.position_endstop|default(0.0)|float %}
     {% set probe_z_offset = printer.tool_probe_endstop.active_tool_probe_z_offset|float %}
     {% set offset = (-probe_z_result + position_endstop + tool_z_offset + probe_z_offset) %}

     SET_GCODE_OFFSET Z_ADJUST={ offset }
  {% else %}
    RESPOND type=error MSG='Not applying any home offsets because no tool was detected'
  {% endif %}

[homing_override]
axes: xyz
gcode:
  DETECT_ACTIVE_TOOL_PROBE
  {% if printer.tool_probe_endstop.last_query %}
    RESPOND TYPE=error MSG='Probe triggered, cannot home.'
  {% else %}
    SET_GCODE_OFFSET X=0.0 Y=0.0 Z=0.0

    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}

    SAVE_CURRENT_TOOL T={printer.tool_probe_endstop.active_tool_number}

    STATUS_HOMING

    #UNSAFE_RAISE_GANTRY

    # Always home Y first, to avoid interference from X/Y tensioners and also avoid bumping into docked tools
    {% if home_all or 'Y' in params %}
      _HOME_Y
    {% endif %}

    {% if home_all or 'X' in params %}
      _HOME_X
    {% endif %}

    {% if home_all or 'Z' in params %}
      {% set random_x = (range(-50, 50) | random) / 10 %}
      {% set random_y = (range(-50, 50) | random) / 10 %}
      {% set th = printer.toolhead %}
      
      G90 ; absolute mode

      # move to switch location and home
      G0 X260 Y358 F6000
      G28 Z
      G0 Z5

      # wipe nozzle but only if nozzle is hot enough, material will not come off otherwise anyway
      {% set extruder = printer['tool ' + printer.tool_probe_endstop.active_tool_number|string].extruder %}
      {% set PROBE_TEMP = 150 %}
      {% if printer[extruder].temperature > (PROBE_TEMP - 5) %}
        WIPE_NOZZLE MOVE=0
      {% endif %}

      # move to bed center and probe
      G0 X{th.axis_maximum.x//2 + random_x} Y{th.axis_maximum.y//2 + random_y} Z0 F6000
      PROBE SAMPLES=3
      _SAVE_PROBE_RESULT

      # move off bed and apply offsets
      G0 Z10 F1000 ; lift off bed
      _SET_BED_OFFSETS
    {% endif %}

    STATUS_READY

    ; Apply gcode offsets
    KTCC_SET_GCODE_OFFSET_FOR_CURRENT_TOOL MOVE=1
  {% endif %}

[gcode_macro TOOL_BED_MESH_CALIBRATE]
gcode:
      {% set active_tool_no = printer.tool_probe_endstop.active_tool_number %}
      {% set tool_z_offset = printer["tool "+active_tool_no|string].offset[2] %}         
      G0 Z10 F1000
      # Bed mesh knows about the probe offset, but not about the tool offset.
      SET_KINEMATIC_POSITION Z={10.0-tool_z_offset|float}
      BED_MESH_CALIBRATE
      G0 Z10 F1000
      SET_KINEMATIC_POSITION Z={10.0+tool_z_offset|float}

      # re-home Z after bed mesh is complete
      G28 Z
