# Macros for sensorless homing with TapChanger

[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 X
    # Move away
    G91
    G1 X-10 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[homing_override]
axes: xyz
gcode:
  DETECT_ACTIVE_TOOL_PROBE
  {% if printer.tool_probe_endstop.last_query  %}
    RESPOND TYPE=echo MSG='Probe triggered, cannot home.'
  {% else %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}

    STATUS_HOMING

    {% if home_all or 'X' in params %}
      _HOME_X
    {% endif %}

    {% if home_all or 'Y' in params %}
      _HOME_Y
    {% endif %}

    {% if home_all or 'Z' in params %}
      {% set random_x = (range(-50, 50) | random) / 10 %}
      {% set random_y = (range(-50, 50) | random) / 10 %}
      {% set th = printer.toolhead %}
     
      G90 ; absolute mode    
      G0 X{th.axis_maximum.x//2 + random_x} Y{th.axis_maximum.y//2 + random_y} F6000
      G28 Z      
      ; Depending on the active tool at the time of homing, the physical Z endstop position is offset.
      ; This corrects for that using current tool offset.
      G0 Z10 F1000
      {% set active_tool_no = printer.tool_probe_endstop.active_tool_number %}
      {% if active_tool_no != -1 %}
         {% set tool_z_offset = printer["tool "+active_tool_no|string].offset[2] %}         
         SET_KINEMATIC_POSITION Z={10.0+tool_z_offset|float}         
      {% endif %}
    {% endif %}

    STATUS_READY

    ; Apply gcode offsets
    KTCC_SET_GCODE_OFFSET_FOR_CURRENT_TOOL MOVE=1
  {% endif %}

[gcode_macro TOOL_BED_MESH_CALIBRATE]
gcode:
      {% set active_tool_no = printer.tool_probe_endstop.active_tool_number %}
      {% set tool_z_offset = printer["tool "+active_tool_no|string].offset[2] %}         
      G0 Z30 F1000
       SET_KINEMATIC_POSITION Z={30.0-tool_z_offset|float}         
      BED_MESH_CALIBRATE
      G0 Z30 F1000
       SET_KINEMATIC_POSITION Z={30.0+tool_z_offset|float}         
